class PointsViewModel : ViewModel() {
    var input by mutableStateOf("0")
        private set
    var isValidInput by mutableStateOf(false)
        private set
    var errorMessage by mutableStateOf("")
        private set
    var dollarAmount by mutableStateOf(0)
        private set

    fun onInputChange(newValue: String) {
        if (newValue.all { it.isDigit() }) {
            input = newValue
            val number = newValue.toIntOrNull() ?: 0
            when {
                number == 0 -> {
                    isValidInput = false
                    errorMessage = ""
                    dollarAmount = 0
                }
                number > 4200 -> {
                    isValidInput = false
                    errorMessage = "Please enter a value less than or equal to 4200"
                    dollarAmount = 0
                }
                number % 100 != 0 -> {
                    isValidInput = false
                    errorMessage = "Please enter multiples of hundreds only"
                    dollarAmount = 0
                }
                else -> {
                    isValidInput = true
                    errorMessage = ""
                    dollarAmount = (number / 100) * 10
                }
            }
        }
    }


@Composable
fun App() {
    MaterialTheme {
        Box(
            modifier = Modifier
                .fillMaxSize()
                .imePadding() // Adds padding to avoid keyboard overlap
        ) {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp), // Base padding
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                // Main content
                Column(
                    modifier = Modifier
                        .weight(1f) // Pushes the button to the bottom
                        .fillMaxWidth()
                        .padding(16.dp)
                ) {
                    Text("Enter points (multiples of 100, up to 4200):")

                    TextField(
                        value = pointsViewModel.input,
                        onValueChange = { pointsViewModel.onInputChange(it) },
                        modifier = Modifier.fillMaxWidth(),
                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                        isError = pointsViewModel.errorMessage.isNotEmpty()
                    )

                    if (pointsViewModel.errorMessage.isNotEmpty()) {
                        Text(
                            text = pointsViewModel.errorMessage,
                         //   color = MaterialTheme.colorScheme.error,
                         //   style = MaterialTheme.typography.bodySmall
                        )
                    } else {
                        Text(
                            text = "Equivalent Dollar Amount: $${pointsViewModel.dollarAmount}",
                            style = MaterialTheme.typography.bodyMedium
                        )
                    }
                }

                // Button aligned at the bottom
                Button(
                    onClick = { /* Handle button click */ },
                    //  enabled = pointsViewModel.isValidInput,
                    modifier = Modifier
                        .align(Alignment.CenterHorizontally)
                        .padding(bottom = 50.dp)
                        .height(100.dp)
                ) {
                    Text("Submit")
                }
            }
        }
    }

}
}




@Composable
@Preview
fun App() {
    var input by remember { mutableStateOf("0") }
    var isValidInput by remember { mutableStateOf(false) }
    var errorMessage by remember { mutableStateOf("") }

    MaterialTheme {
        Box(
            modifier = Modifier
                .fillMaxSize()
                .imePadding() // Adds padding to avoid keyboard overlap
        ) {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp), // Base padding
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                // Main content
                Column(
                    modifier = Modifier
                        .weight(1f) // Pushes the button to the bottom
                        .fillMaxWidth()
                        .padding(16.dp)
                ) {
                    Text("My content")
                    Text("My content")
                    Text("My content")

                    TextField(
                        value = input,
                        onValueChange = { newValue ->
                            // Allow only numeric input
                            if (newValue.all { it.isDigit() }) {
                                input = newValue
                                val number = newValue.toIntOrNull() ?: 0
                                isValidInput = number != 0 && number % 100 == 0
                                errorMessage = if (isValidInput) {
                                    ""
                                } else if (number == 0) {
                                    ""
                                } else {
                                    "Please enter multiples of hundreds only"
                                }
                            }
                        },
                        modifier = Modifier.fillMaxWidth(),
                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                        isError = errorMessage.isNotEmpty()
                    )

                    if (errorMessage.isNotEmpty()) {
                        Text(
                            text = errorMessage,
                          //  color = Colors.R,
                         //   style = MaterialTheme.typography.bodySmall
                        )
                    }
                }

                // Button aligned at the bottom
                Button(
                    onClick = { /* Handle button click */ },
                    enabled = isValidInput,
                    modifier = Modifier
                        .align(Alignment.CenterHorizontally)
                        .padding(bottom = 50.dp)
                        .height(100.dp)
                ) {
                    Text("BTN")
                }
            }
        }
    }
}



